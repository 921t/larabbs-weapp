<style lang="less">
  .weui-flex {
    align-items: center;
  }
  .weui-cells {
    margin-top: 0;
    opacity: 0;
    transition: .3s;
    &:before, &:after {
      display: none;
    }
    &_show {
      opacity: 1;
    }
  }
  .weui-cell {
    &:before {
      right: 15px;
    }
  }
  .category-list__item {
    margin: 10px 0;
    background-color: #FFFFFF;
    border-radius: 2px;
    overflow: hidden;
    &:first-child {
      margin-top: 0;
    }
  }
  .category-list__item_selected {
    background-color: #eeeeee;
  }
  .category-list__img {
    width: 30px;
    height: 30px;
  }
  .category-list__item-hd {
    padding: 20px;
    transition: opacity .3s;
    &_show {
      opacity: .4;
    }
  }
  .category-list__item-bd {
    height: 0;
    overflow: hidden;
    &_show {
      height: auto;
    }
  }

</style>

<template>
  <div class="page">
    <div class="page__bd">

      <div class="category-list__item">
        <div class="weui-flex category-list__item-hd" @tap="categoriesToggle">
          <div class="weui-flex__item page-title">{{ currentCategoryName }}</div>
          <image class="category-list__img" src="/assets/images/category.png" />
        </div>
        <div class="category-list__item-bd"
             :class="{'category-list__item-bd_show' : categoryOpen}">
          <div class="weui-cells" :class="{ 'weui-cells_show' : categoryOpen }">
            <div @tap="changeCategory" class="weui-cell weui-cell_access" :class="{'category-list__item_selected' : !currentCategoryId }">
              <div class="weui-cell__bd">话题</div>
            </div>
            <div v-for="category in categories" :key="category.id">
              <div @tap="changeCategory(category)"
                   class="weui-cell weui-cell_access"
                   :class="{'category-list__item_selected': currentCategoryId == category.id}">
                <div class="weui-cell__bd">{{ category.name }}</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <topic-list :topics="topics" :no-more-data="noMoreData"></topic-list>
    </div>
  </div>
</template>

<config>
  {
    enablePullDownRefresh: true,
    usingComponents: {
      "topic-list": "~@/components/topic-list"
    }
  }
</config>

<script>
  import wepy from '@wepy/core'
  import {getTopics, getCategories} from '@/api/topic'

  wepy.page({
    data: {
      topics: [],
      categories: [],
      currentCategory: {},
      categoryOpen: false,
      page: 1,
      noMoreData: false,
      isLoading: false
    },
    computed: {
      currentCategoryId() {
        return this.currentCategory.id || null
      },
      currentCategoryName() {
        return this.currentCategory.name || '话题'
      }
    },
    async onLoad() {
      await this.loadTopics()
      await this.loadCategories()
    },
    async onPullDownRefresh() {
      await this.loadTopics(true)
      wx.stopPullDownRefresh()
    },
    async onReachBottom() {
      if (this.noMoreData || this.isLoading) {
        return
      }

      this.isLoading = true
      this.page += 1

      await this.loadTopics()

      this.isLoading = false
    },
    methods: {
      async loadTopics(reset = false) {
        if (reset) {
          this.page = 1
        }

        let params = {
          page: this.page,
          include: 'user,category'
        }

        if (this.currentCategoryId) {
          params['filter[category_id]'] = this.currentCategoryId
        }

        const response = await getTopics(params)

        this.topics = reset ? response.data.data : this.topics.concat(response.data.data)

        const pagination = response.data.meta

        if (pagination.current_page === pagination.last_page) {
          this.noMoreData = true
        }
      },
      async loadCategories() {
        let categories = wx.getStorageSync('categories')

        if (!categories) {
          const response = await getCategories()

          categories = response.data.data

          wx.setStorageSync('categories', categories)
        }

        this.categories = categories
      },
      categoriesToggle() {
        this.categoryOpen = !this.categoryOpen
      },
      async changeCategory(category = {}) {
        this.currentCategory = category
        this.categoryOpen = false
        this.page = 1

        await this.loadTopics(true)
      }
    }
  })
</script>
